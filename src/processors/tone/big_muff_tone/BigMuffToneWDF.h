#pragma once

#include <pch.h>

class BigMuffToneWDF
{
public:
    BigMuffToneWDF() = default;

    void prepare (double fs);
    void setParams (float tone, float center);

    inline float processSample (float x)
    {
        Vin.setVoltage (x);

        Vin.incident (R.reflected());
        R.incident (Vin.reflected());

        return wdft::voltage<float> (R5) + wdft::voltage<float> (RTp);
    }

private:
    // Port A
    wdft::ResistorT<float> RTp { 50.0e3f };
    wdft::ResistorT<float> RTm { 50.0e3f };
    wdft::WDFSeriesT<float, decltype (RTp), decltype (RTm)> Sa { RTp, RTm };

    // Port B
    wdft::ResistorT<float> R8 { 39.0e3f };

    // Port C
    wdft::CapacitorT<float> C8 { 10.0e-9f };

    // Port D
    wdft::ResistorT<float> R5 { 22.0e3f };

    // Port F
    wdft::CapacitorT<float> C9 { 4.0e-9f };

    struct ImpedanceCalc
    {
        template <typename RType>
        static float calcImpedance (RType& R)
        {
            const auto [Ra, Rb, Rc, Rd, Rf] = R.getPortImpedances();

            // This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
            // invoked with command: r_solver.py --adapt 4 --out scratch/big_muff_tone_scatt.txt netlists/big_muff_tone.txt
            R.setSMatrixData ({ { -((Ra * Ra * Rb + (Ra * Ra - Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + Ra * Ra * Rc - Rb * Rc * Rc - (Rb + Rc) * Rd * Rd - (2 * Rb * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + 2 * Ra * Ra * Rb * Rc + (Ra * Ra - Rb * Rb) * Rc * Rc) * Rd + (Ra * Ra * Rb * Rb + 2 * Ra * Ra * Rb * Rc + (Ra * Ra - Rb * Rb) * Rc * Rc - (Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb - Rb * Rc * Rc + (Ra * Ra - Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Ra * Rb + 2 * (Ra * Ra + Ra * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rc + Ra * Rc * Rc + Ra * Rc * Rd) * Rf * Rf + 2 * (Ra * Ra * Rb * Rc + (Ra * Ra + Ra * Rb) * Rc * Rc) * Rd + (2 * Ra * Ra * Rb * Rc + 2 * (Ra * Ra + Ra * Rb) * Rc * Rc + (Ra * Rb + 2 * Ra * Rc) * Rd * Rd + (Ra * Ra * Rb + 2 * Ra * Rc * Rc + 3 * (Ra * Ra + Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Ra * Rb + Ra * Rb * Rb) * Rd * Rd + (2 * Ra * Ra * Rb + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + Ra * Rc) * Rd) * Rf * Rf + 2 * (Ra * Ra * Rb * Rb + (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (2 * Ra * Ra * Rb * Rb + Ra * Rb * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + (3 * Ra * Ra * Rb + 2 * Ra * Rb * Rb + (Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((2 * Ra * Ra * Rb + Ra * Rc * Rc + 2 * (Ra * Ra + Ra * Rb) * Rc + 2 * (Ra * Rb + Ra * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (2 * Ra * Ra * Rb * Rb + (Ra * Ra + Ra * Rb) * Rc * Rc + (3 * Ra * Ra * Rb + 2 * Ra * Rb * Rb) * Rc + (2 * Ra * Ra * Rb + 2 * Ra * Rb * Rb + (2 * Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), (Ra * Rb * Rd - Ra * Rc * Rf) / ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf), ((2 * Ra * Ra * Rb + Ra * Rb * Rb + 2 * (Ra * Ra + Ra * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb * Rb + 2 * (Ra * Ra + Ra * Rb) * Rc * Rc + (3 * Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rc + (Ra * Ra + Ra * Rb) * Rc * Rc + 2 * (Ra * Rb + Ra * Rc) * Rd * Rd + (2 * Ra * Ra * Rb + 2 * Ra * Rc * Rc + (2 * Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) },
                                { -((Ra * Rb * Rb + 2 * (Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Rf * Rf + 2 * (Ra * Rb * Rb * Rc + (Ra * Rb + Rb * Rb) * Rc * Rc) * Rd + (2 * Ra * Rb * Rb * Rc + 2 * (Ra * Rb + Rb * Rb) * Rc * Rc + (Rb * Rb + 2 * Rb * Rc) * Rd * Rd + (Ra * Rb * Rb + 2 * Rb * Rc * Rc + 3 * (Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Rb * Rb - (Ra * Ra - Rb * Rb) * Rc) * Rd * Rd - (Ra * Ra * Rc + Ra * Rc * Rc + Rc * Rd * Rd + (2 * Ra * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + 2 * Ra * Rb * Rb * Rc - (Ra * Ra - Rb * Rb) * Rc * Rc) * Rd + (Ra * Ra * Rb * Rb + 2 * Ra * Rb * Rb * Rc - (Ra * Ra - Rb * Rb) * Rc * Rc + (Rb * Rb - 2 * Ra * Rc) * Rd * Rd + 2 * (Ra * Rb * Rb - Ra * Rc * Rc - (Ra * Ra - Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra * Ra * Rb + Ra * Rb * Rb) * Rd * Rd + (Ra * Ra * Rb + Ra * Rb * Rc + Rb * Rd * Rd + (2 * Ra * Rb + Rb * Rc) * Rd) * Rf * Rf + 2 * (Ra * Ra * Rb * Rb + (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (2 * Ra * Ra * Rb * Rb + (2 * Ra * Rb + Rb * Rb) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + (2 * Ra * Ra * Rb + 3 * Ra * Rb * Rb + (3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Rf * Rf - (Ra * Ra * Rb * Rb + (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd - (Ra * Ra * Rb * Rb + Ra * Ra * Rb * Rc - (Ra * Rb + Rb * Rb) * Rc * Rc + (Ra * Rb * Rb - Rb * Rb * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -(Ra * Rb * Rd + (Ra * Rb + Rb * Rc + Rb * Rd) * Rf) / ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf), ((Ra * Rb * Rb + 2 * (Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb * Rb + 2 * (Ra * Rb + Rb * Rb) * Rc * Rc + (Ra * Ra * Rb + 3 * Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Rb + Rb * Rb) * Rc * Rc + (Rb * Rb + 2 * Rb * Rc) * Rd * Rd + (Ra * Ra * Rb + 2 * Ra * Rb * Rb) * Rc + (2 * Ra * Rb * Rb + 2 * Rb * Rc * Rc + (3 * Ra * Rb + 2 * Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) },
                                { -((Ra * Rb + Rb * Rb) * Rc * Rd * Rd + (2 * Ra * Rb * Rc + (Ra + 2 * Rb) * Rc * Rc + (2 * Rb * Rc + Rc * Rc) * Rd) * Rf * Rf + 2 * (Ra * Rb * Rb * Rc + (Ra * Rb + Rb * Rb) * Rc * Rc) * Rd + (2 * Ra * Rb * Rb * Rc + Rb * Rc * Rd * Rd + 2 * (Ra * Rb + Rb * Rb) * Rc * Rc + ((Ra + 3 * Rb) * Rc * Rc + (3 * Ra * Rb + 2 * Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra * Ra + Ra * Rb) * Rc * Rd * Rd + (Ra * Ra * Rc + Ra * Rc * Rc + Rc * Rd * Rd + (2 * Ra * Rc + Rc * Rc) * Rd) * Rf * Rf + 2 * (Ra * Ra * Rb * Rc + (Ra * Ra + Ra * Rb) * Rc * Rc) * Rd + (2 * Ra * Ra * Rb * Rc + (2 * Ra + Rb) * Rc * Rd * Rd + 2 * (Ra * Ra + Ra * Rb) * Rc * Rc + ((3 * Ra + Rb) * Rc * Rc + (2 * Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra * Ra * Rb + Ra * Rb * Rb) * Rd * Rd + (Ra * Ra * Rb - (Ra + Rb) * Rc * Rc + Rb * Rd * Rd + (2 * Ra * Rb - Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb - (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc) * Rd + (Ra * Ra * Rb * Rb - (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb - (Ra + Rb) * Rc * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((2 * Ra * Rb * Rc + (Ra + 2 * Rb) * Rc * Rc + (2 * Rb * Rc + Rc * Rc) * Rd) * Rf * Rf + ((Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + ((Ra * Ra + 3 * Ra * Rb + 2 * Rb * Rb) * Rc * Rc + (Ra * Ra * Rb + 2 * Ra * Rb * Rb) * Rc + (2 * (Ra + Rb) * Rc * Rc + (3 * Ra * Rb + 2 * Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra + Rb) * Rc * Rd + (Ra * Rc + Rc * Rd) * Rf) / ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf), ((Ra * Rb + Rb * Rb) * Rc * Rd * Rd - ((Ra * Ra - Rb * Rb) * Rc * Rc + (Ra * Ra * Rb - Ra * Rb * Rb) * Rc) * Rd - (Ra * Ra * Rb * Rc + (Ra - Rb) * Rc * Rc * Rd - Rb * Rc * Rd * Rd + (Ra * Ra + Ra * Rb) * Rc * Rc) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) },
                                { -((Ra * Rb * Rb + (Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (2 * (Rb + Rc) * Rd * Rd + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + ((2 * Ra * Rb + 2 * Rb * Rb + (2 * Ra + 3 * Rb) * Rc) * Rd * Rd + (2 * Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (3 * Ra * Rb + 2 * Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra * Ra * Rb + (Ra * Ra + Ra * Rb) * Rc) * Rd * Rd - (Rc * Rd * Rd + (Ra * Rc + Rc * Rc) * Rd) * Rf * Rf + ((Ra * Rb - Rb * Rc) * Rd * Rd + (Ra * Ra * Rb + Ra * Ra * Rc - (Ra + Rb) * Rc * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + ((2 * Rb + Rc) * Rd * Rd + (2 * Ra * Rb + (Ra + 2 * Rb) * Rc) * Rd) * Rf * Rf + ((3 * Ra * Rb + 2 * Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + 2 * Ra * Rb * Rb + (Ra * Ra + 3 * Ra * Rb + 2 * Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd - (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc - (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc) * Rf * Rf - (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc - (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -(Rc * Rd * Rf + (Ra * Rb + (Ra + Rb) * Rc) * Rd) / ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf), -((2 * Ra * Ra * Rb + Ra * Rb * Rb + (2 * Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + ((2 * Ra * Rb + (2 * Ra + Rb) * Rc) * Rd * Rd + (2 * Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (2 * Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) },
                                { (Rb * Rd - Rc * Rf) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf), -(Ra * Rd + (Ra + Rc + Rd) * Rf) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf), ((Ra + Rb) * Rd + (Ra + Rd) * Rf) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf), -(Ra * Rb + (Ra + Rb) * Rc + Rc * Rf) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf), 0, -(Ra * Rb + (Ra + Rb) * Rc + Rb * Rd) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf) },
                                { ((Ra * Rb * Rc + (Ra + Rb) * Rc * Rc + 2 * (Rb + Rc) * Rd * Rd + (2 * Ra * Rb + (2 * Ra + 3 * Rb) * Rc + 2 * Rc * Rc) * Rd) * Rf * Rf + ((2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + (Ra * Rb * Rb + 2 * (Ra + Rb) * Rc * Rc + (3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), ((Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + 2 * Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + (3 * Ra + 2 * Rb) * Rc + 2 * Rc * Rc) * Rd) * Rf * Rf + ((Ra * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + 2 * (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((Ra * Ra * Rb + (Ra - Rb) * Rc * Rd - Rb * Rd * Rd + (Ra * Ra + Ra * Rb) * Rc) * Rf * Rf - ((Ra * Rb + Rb * Rb) * Rd * Rd - (Ra * Ra * Rb - Ra * Rb * Rb + (Ra * Ra - Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -((2 * Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (2 * Ra * Ra + 3 * Ra * Rb) * Rc + (2 * Ra * Rb + (2 * Ra + Rb) * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + (2 * Ra * Ra * Rb + Ra * Rb * Rb + (2 * Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf), -(Ra * Rb + (Ra + Rb) * Rc + Rb * Rd) * Rf / ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf), ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd - (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd) / ((Ra * Ra * Rb + Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc) * Rd * Rd + (Ra * Ra * Rb + (Ra + Rb) * Rc * Rc + (Rb + Rc) * Rd * Rd + (Ra * Ra + 2 * Ra * Rb) * Rc + (2 * Ra * Rb + 2 * (Ra + Rb) * Rc + Rc * Rc) * Rd) * Rf * Rf + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc) * Rd + (Ra * Ra * Rb * Rb + (Ra * Ra + 2 * Ra * Rb + Rb * Rb) * Rc * Rc + (2 * Ra * Rb + Rb * Rb + 2 * (Ra + Rb) * Rc) * Rd * Rd + 2 * (Ra * Ra * Rb + Ra * Rb * Rb) * Rc + 2 * (Ra * Ra * Rb + Ra * Rb * Rb + (Ra + Rb) * Rc * Rc + (Ra * Ra + 3 * Ra * Rb + Rb * Rb) * Rc) * Rd) * Rf) } });

            auto Re = ((Ra * Rb + (Ra + Rb) * Rc) * Rd + (Ra * Rb + (Ra + Rb) * Rc + (Rb + Rc) * Rd) * Rf) / (Ra * Rb + (Ra + Rb) * Rc + (Ra + Rb) * Rd + (Ra + Rc + Rd) * Rf);
            return Re;
        }
    };

    using RType = wdft::RtypeAdaptor<float, 4, ImpedanceCalc, decltype (Sa), decltype (R8), decltype (C8), decltype (R5), decltype (C9)>;
    RType R { std::tie (Sa, R8, C8, R5, C9) };

    // Port E
    wdft::IdealVoltageSourceT<float, decltype (R)> Vin { R };
};
