#include "BaxandallWDF.h"

void BaxandallWDF::prepare (double fs)
{
    Ca.prepare ((float) fs);
    Cb.prepare ((float) fs);
    Cc.prepare ((float) fs);
    Cd.prepare ((float) fs);
    Ce.prepare ((float) fs);
}

void BaxandallWDF::setParams (float bassParam, float trebleParam)
{
    Pb_plus.setResistanceValue (Pb * bassParam);
    Pb_minus.setResistanceValue (Pb * (1.0f - bassParam));

    Pt_plus.setResistanceValue (Pt * trebleParam);
    Pt_minus.setResistanceValue (Pt * (1.0f - trebleParam));

    const auto Ra = S4.R;
    const auto Rb = P1.R;
    const auto Rc = Resc.R;
    const auto Rd = S3.R;
    const auto Re = S2.R;
    const auto Rf = S1.R;
    const auto Ga = 1.0f / Ra;
    const auto Gb = 1.0f / Rb;
    const auto Gc = 1.0f / Rc;
    const auto Gd = 1.0f / Rd;
    const auto Ge = 1.0f / Re;
    const auto Gf = 1.0f / Rf;

    // This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
    // with netlist input: netlists/baxandall.txt
    R.setSMatrixData ({ { 2 * Ra * (-Ge * (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc)) - Gf * (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Ga * Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1, 2 * Ra * (-Ga * Gb * Gd * Ge - Gf * (Ga * Gb * Gc + Ga * Gb * Gd + Ga * Gb * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Ra * (Ge * (Ga * Gb * Gc + Ga * Gc * Gd) + Gf * (Ga * Gc * Gd + Ga * Gc * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Ra * (Ga * Gb * Gd * Ge - Ga * Gc * Gd * Gf) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Ra * (Ga * Gc * Ge * Gf + Ge * (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Ra * (-Ga * Gb * Gc - Ga * Gb * Ge - Gd * (Ga * Gb + Ga * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) },
                        { 2 * Rb * (-Ga * Gb * Gd * Ge - Gf * (Ga * Gb * Gc + Ga * Gb * Gd + Ga * Gb * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rb * (-Ga * Gb * Gc * Gd - Gd * Ge * (Ga * Gb + Gb * Gc) - Gf * (Ga * Gb * Gc + Gd * (Ga * Gb + Gb * Gc) + Ge * (Ga * Gb + Gb * Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1, 2 * Rb * (-Ga * Gb * Gc * Gd - Gb * Gc * Gd * Ge - Gf * (Gb * Gc * Gd + Gb * Gc * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rb * (Ga * Gb * Gc * Gd + Gb * Gc * Gd * Gf + Gd * Ge * (Ga * Gb + Gb * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rb * (Ga * Gb * Gd * Ge - Gb * Gc * Ge * Gf) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rb * (-Ga * Gb * Gc - Ga * Gb * Gd - Ge * (Ga * Gb + Gb * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) },
                        { 2 * Rc * (Ge * (Ga * Gb * Gc + Ga * Gc * Gd) + Gf * (Ga * Gc * Gd + Ga * Gc * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rc * (-Ga * Gb * Gc * Gd - Gb * Gc * Gd * Ge - Gf * (Gb * Gc * Gd + Gb * Gc * Ge)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rc * (-Ga * Gb * Gc * Gd - Ge * (Ga * Gb * Gc + Gc * Gd * (Ga + Gb)) - Gf * (Gc * Gd * (Ga + Gb) + Gc * Ge * (Ga + Gb))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1, 2 * Rc * (Ga * Gb * Gc * Gd + Gb * Gc * Gd * Ge + Gc * Gd * Gf * (Ga + Gb)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rc * (-Gc * Ge * Gf * (Ga + Gb) - Ge * (Ga * Gb * Gc + Ga * Gc * Gd)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rc * (Ga * Gc * Gd - Gb * Gc * Ge) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) },
                        { 2 * Rd * (Ga * Gb * Gd * Ge - Ga * Gc * Gd * Gf) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rd * (Ga * Gb * Gc * Gd + Gb * Gc * Gd * Gf + Gd * Ge * (Ga * Gb + Gb * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rd * (Ga * Gb * Gc * Gd + Gb * Gc * Gd * Ge + Gc * Gd * Gf * (Ga + Gb)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Rd * (-Ga * Gb * Gc * Gd - Gd * Ge * (Ga * Gb + Gb * Gc) - Gf * (Gc * Gd * (Ga + Gb) + Gd * Ge * (Ga + Gb + Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1, 2 * Rd * (-Ga * Gb * Gd * Ge - Gd * Ge * Gf * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rd * (-Ga * Gc * Gd - Gd * Ge * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) },
                        { 2 * Re * (Ga * Gc * Ge * Gf + Ge * (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Re * (Ga * Gb * Gd * Ge - Gb * Gc * Ge * Gf) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Re * (-Gc * Ge * Gf * (Ga + Gb) - Ge * (Ga * Gb * Gc + Ga * Gc * Gd)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Re * (-Ga * Gb * Gd * Ge - Gd * Ge * Gf * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Re * (-Ge * Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc)) - Ge * (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1, 2 * Ge * Gf * Re * (-Gb * Gc - Gd * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) },
                        { 2 * Gf * Rf * (-Ga * Gb * Gc - Ga * Gb * Ge - Gd * (Ga * Gb + Ga * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rf * (-Ga * Gb * Gc - Ga * Gb * Gd - Ge * (Ga * Gb + Gb * Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rf * (Ga * Gc * Gd - Gb * Gc * Ge) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rf * (-Ga * Gc * Gd - Gd * Ge * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Ge * Gf * Rf * (-Gb * Gc - Gd * (Ga + Gb + Gc)) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))), 2 * Gf * Rf * (-Ga * Gb * Gc - Gd * (Ga * Gb + Ga * Gc) - Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc))) / (Ga * Gb * Gc + Gd * (Ga * Gb + Ga * Gc) + Ge * (Ga * Gb + Gb * Gc + Gd * (Ga + Gb + Gc)) + Gf * (Gc * (Ga + Gb) + Gd * (Ga + Gb + Gc) + Ge * (Ga + Gb + Gc))) + 1 } });
}
